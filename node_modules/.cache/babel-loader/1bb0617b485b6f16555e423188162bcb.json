{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\peppe\\\\Documents\\\\code-stuff\\\\TweetBook\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Post from './components/Post.js';\nimport ReplyBox from './components/ReplyBox.js';\nimport ReplyButton from './components/ReplyButton.js';\nimport Register from './components/Register';\nimport Login from './components/Login';\nimport FileUploadBar from './components/FileUploadBar.js';\nimport config from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  async function checkCookieForLoginToken() {\n    if (document.cookie) {\n      let userID = document.cookie.split('; ').find(row => row.startsWith(\"UserID=\")).split(\"=\")[1];\n      await tryLoginFromCookie(userID);\n    }\n\n    setCookieChecked(true);\n  }\n\n  useEffect(() => {\n    checkCookieForLoginToken();\n  }, []);\n  let [posts, setPosts] = useState([]);\n\n  function getPosts(postID) {\n    let postQuery = \"\";\n\n    if (postIdParam || postID) {\n      postQuery += \"?id=\" + (postID || postIdParam);\n    }\n\n    console.log('get posts ' + postID);\n    fetch(config.API() + \"/tweetbookapi/Posts\" + postQuery).then(response => response.json()).then(posts => setPosts(posts));\n  }\n\n  const [registerError, setRegisterError] = useState(\"\");\n  const [showLoginError, setShowLoginError] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isReplying, setIsReplying] = useState(false);\n  const [isNewPostVisible, setIsNewPostVisible] = useState(true);\n  const [postReplyId, setPostReplyId] = useState(0);\n  const [blurStyle, setBlurStyle] = useState(\"blur-sm\");\n  const [fileIsUploading, setFileIsUploading] = useState(false);\n  const [isGuest, setIsGuest] = useState(false);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [userLoggedIn, setUserLoggedIn] = useState({\n    \"UserID\": 1,\n    \"Username\": \"Guest\",\n    \"Avatar\": \"guest.png\"\n  });\n  const [postIdParam, setPostIdParam] = useState(null);\n  const [cookieChecked, setCookieChecked] = useState(false);\n  const [returnButton, setReturnButton] = useState({\n    enabled: false,\n    previousID: null\n  });\n  useEffect(() => {\n    getPosts();\n    let timer = setInterval(() => {\n      getPosts();\n    }, 15000);\n    return clearInterval(timer);\n  }, [postIdParam]);\n\n  function setPostsString(postID) {\n    setReturnButton({\n      enabled: postID == null ? false : true,\n      previousID: postIdParam,\n      currentID: postID\n    });\n    setPostIdParam(postID); //getPosts();\n  }\n\n  function shouldShowLogin() {\n    return !(isLoggedIn || isGuest || isRegistering);\n  }\n\n  async function tryLoginFromCookie(UserID) {\n    const response = await fetch(config.API() + \"/tweetbookapi/Login/LoginByToken\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        UserID: UserID\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n\n      return response.json();\n    }).then(data => {\n      if (data !== -1) {\n        setBlurStyle(\"\");\n        setIsLoggedIn(true);\n        setIsGuest(false);\n        setUserLoggedIn({\n          \"UserID\": data.userID,\n          \"Username\": data.username,\n          \"Avatar\": data.avatar\n        });\n        setIsRegistering(false);\n        setBlurStyle(\"\");\n        setIsLoggedIn(true);\n        setIsGuest(false);\n        let date = new Date();\n        date.setTime(date.getTime() + 4 * 60 * 60 * 1000);\n        document.cookie = \"UserID\" + \"=\" + data.userID + \"; expires=\" + date.toUTCString() + \"; path=/\";\n      }\n    }).catch(error => {\n      setShowLoginError(true);\n    });\n  }\n\n  async function tryLogin(username, password) {\n    const response = await fetch(config.API() + \"/tweetbookapi/Login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n\n      return response.json();\n    }).then(data => {\n      if (data !== -1) {\n        setBlurStyle(\"\");\n        setIsLoggedIn(true);\n        setIsGuest(false);\n        setUserLoggedIn({\n          \"UserID\": data.userID,\n          \"Username\": data.username,\n          \"Avatar\": data.avatar\n        });\n        setIsRegistering(false);\n        setBlurStyle(\"\");\n        setIsLoggedIn(true);\n        setIsGuest(false);\n        let date = new Date();\n        date.setTime(date.getTime() + 4 * 60 * 60 * 1000);\n        document.cookie = \"UserID\" + \"=\" + data.userID + \"; expires=\" + date.toUTCString() + \"; path=/\";\n      }\n    }).catch(error => {\n      setShowLoginError(true);\n    });\n  }\n\n  async function tryRegister(username, password) {\n    const response = await fetch(config.API() + \"/tweetbookapi/Login/Register\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(response => response.json()).then(data => {\n      let resp = data.value;\n\n      if (resp.userID && resp.userID !== -1) {\n        setBlurStyle(\"\");\n        setIsLoggedIn(true);\n        setIsGuest(false);\n        setUserLoggedIn({\n          \"UserID\": resp.userID,\n          \"Username\": username,\n          \"Avatar\": \"guest.png\"\n        });\n        setIsRegistering(false);\n      } else {\n        setRegisterError(resp.message);\n      }\n    });\n  }\n\n  function loginGuest() {\n    setBlurStyle(\"\");\n    setIsLoggedIn(false);\n    setIsGuest(true);\n  }\n\n  function showLogin() {\n    setIsRegistering(false);\n  }\n\n  function showRegister() {\n    setIsRegistering(true);\n  }\n\n  const updateReplying = (value, key) => {\n    setIsReplying(value);\n    setPostReplyId(key);\n  };\n\n  function blurAndShowLoading(show) {\n    if (show) {\n      setBlurStyle(\"blur-sm\");\n    } else {\n      setBlurStyle(\"\");\n    }\n\n    setFileIsUploading(show);\n  }\n\n  function updateLoggedInUserAvatar(fileLocation) {\n    setUserLoggedIn({ ...userLoggedIn,\n      \"Avatar\": fileLocation\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col content-center items-center\",\n    children: [fileIsUploading && /*#__PURE__*/_jsxDEV(FileUploadBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }, this), isRegistering && /*#__PURE__*/_jsxDEV(Register, {\n      setRegisterError: setRegisterError,\n      registerError: registerError,\n      showLogin: showLogin,\n      tryRegister: tryRegister\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), shouldShowLogin() && cookieChecked && /*#__PURE__*/_jsxDEV(Login, {\n      showRegister: showRegister,\n      setShowLoginError: setShowLoginError,\n      showLoginError: showLoginError,\n      loginGuest: loginGuest,\n      tryLogin: tryLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: blurStyle,\n      children: posts.map(post => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          returnButton: returnButton,\n          setPostsString: setPostsString,\n          nestLevel: 0,\n          isChild: false,\n          position: \"relative\",\n          updateLoggedInUserAvatar: updateLoggedInUserAvatar,\n          setFileIsUploading: blurAndShowLoading,\n          getPosts: getPosts,\n          replyingPost: postReplyId,\n          isLoggedIn: isLoggedIn,\n          userLoggedIn: userLoggedIn,\n          loggedInUserIsGuest: isGuest,\n          setIsNewPostVisible: setIsNewPostVisible,\n          updateReplying: updateReplying,\n          z: 100,\n          top: 0,\n          post: post,\n          offset: 0\n        }, post.postID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), !shouldShowLogin() && !isRegistering && isNewPostVisible && cookieChecked && /*#__PURE__*/_jsxDEV(ReplyBox, {\n      updateLoggedInUserAvatar: updateLoggedInUserAvatar,\n      updateAvatar: updateLoggedInUserAvatar,\n      setFileIsUploading: blurAndShowLoading,\n      userID: userLoggedIn.UserID,\n      isGuest: isGuest,\n      parentPostID: null,\n      getPosts: getPosts,\n      blurAndShowLoading: blurAndShowLoading,\n      userLoggedIn: userLoggedIn,\n      isLoggedIn: isLoggedIn,\n      isNewPostVisible: isNewPostVisible,\n      isReplying: isReplying,\n      fixedBox: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 85\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"275px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vQCp9qo8mgKtRm2xJMX7Ozz6hFI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/peppe/Documents/code-stuff/TweetBook/src/App.js"],"names":["React","useEffect","useState","Post","ReplyBox","ReplyButton","Register","Login","FileUploadBar","config","App","checkCookieForLoginToken","document","cookie","userID","split","find","row","startsWith","tryLoginFromCookie","setCookieChecked","posts","setPosts","getPosts","postID","postQuery","postIdParam","console","log","fetch","API","then","response","json","registerError","setRegisterError","showLoginError","setShowLoginError","isLoggedIn","setIsLoggedIn","isReplying","setIsReplying","isNewPostVisible","setIsNewPostVisible","postReplyId","setPostReplyId","blurStyle","setBlurStyle","fileIsUploading","setFileIsUploading","isGuest","setIsGuest","isRegistering","setIsRegistering","userLoggedIn","setUserLoggedIn","setPostIdParam","cookieChecked","returnButton","setReturnButton","enabled","previousID","timer","setInterval","clearInterval","setPostsString","currentID","shouldShowLogin","UserID","method","headers","body","JSON","stringify","ok","Error","status","data","username","avatar","date","Date","setTime","getTime","toUTCString","catch","error","tryLogin","password","tryRegister","resp","value","message","loginGuest","showLogin","showRegister","updateReplying","key","blurAndShowLoading","show","updateLoggedInUserAvatar","fileLocation","map","post","height"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport React, {useEffect, useState} from 'react';\r\nimport Post from './components/Post.js'\r\nimport ReplyBox from './components/ReplyBox.js'\r\nimport ReplyButton from './components/ReplyButton.js';\r\nimport Register from './components/Register';\r\nimport Login from './components/Login';\r\nimport FileUploadBar from './components/FileUploadBar.js';\r\nimport config from './config'\r\nfunction App()\r\n{\r\n  async function checkCookieForLoginToken(){\r\n      if (document.cookie){\r\n          let userID = document.cookie.split('; ').find(row => row.startsWith(\"UserID=\")).split(\"=\")[1];\r\n            await tryLoginFromCookie(userID);\r\n      }\r\n      setCookieChecked(true);\r\n  }\r\n    useEffect(()=>{\r\n        checkCookieForLoginToken();\r\n    }, [])\r\n  let [posts, setPosts] = useState([]);\r\n  function getPosts(postID){\r\n    let postQuery = \"\";\r\n      if (postIdParam || postID){\r\n            postQuery += \"?id=\" + (postID || postIdParam);\r\n      }\r\n    console.log('get posts ' + postID);\r\n    fetch(config.API() + \"/tweetbookapi/Posts\" + postQuery)\r\n      .then(response => response.json())\r\n      .then(posts => setPosts(posts))\r\n  }\r\n    const [registerError, setRegisterError] = useState(\"\");\r\n    const [showLoginError, setShowLoginError] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [isReplying, setIsReplying] = useState(false);\r\n  const [isNewPostVisible, setIsNewPostVisible] = useState(true);\r\n  const [postReplyId, setPostReplyId] = useState(0);\r\n  const [blurStyle,setBlurStyle] = useState(\"blur-sm\");\r\n  const [fileIsUploading, setFileIsUploading] = useState(false);\r\n    const [isGuest, setIsGuest] = useState(false);\r\n    const [isRegistering, setIsRegistering] = useState(false);\r\n    const [userLoggedIn, setUserLoggedIn] = useState(\r\n        {\r\n            \"UserID\":1,\r\n            \"Username\":\"Guest\",\r\n            \"Avatar\":\"guest.png\"\r\n        }\r\n    );\r\n    const [postIdParam, setPostIdParam] = useState(null);\r\n    const [cookieChecked, setCookieChecked] = useState(false);\r\n    const [returnButton,setReturnButton] = useState({\r\n        enabled: false,\r\n        previousID: null\r\n    });\r\n      useEffect(() =>\r\n      {\r\n\r\n        getPosts();\r\n        let timer = setInterval(() =>\r\n        {\r\n          getPosts();\r\n        },15000);\r\n        return clearInterval(timer);\r\n      },[postIdParam])\r\n    function setPostsString(postID){\r\n        setReturnButton({\r\n            enabled:(postID == null ? false : true ),\r\n            previousID:postIdParam,\r\n            currentID: postID\r\n        })\r\n        setPostIdParam(postID);\r\n        //getPosts();\r\n    }\r\n  function shouldShowLogin(){\r\n    return !(isLoggedIn || isGuest || isRegistering);\r\n  }\r\n  async function tryLoginFromCookie(UserID){\r\n      const response = await fetch(config.API() + \"/tweetbookapi/Login/LoginByToken\",{\r\n        method : \"POST\",\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            UserID: UserID\r\n        })\r\n    }).then(response => {\r\n        if (!response.ok){\r\n            throw new Error(response.status);\r\n        }\r\n        return response.json();\r\n    })\r\n        .then(data =>{\r\n              if (data !== -1){\r\n                setBlurStyle(\"\");\r\n                setIsLoggedIn(true);\r\n                setIsGuest(false);\r\n                  setUserLoggedIn({\r\n                      \"UserID\": data.userID,\r\n                      \"Username\": data.username,\r\n                      \"Avatar\": data.avatar\r\n                  });\r\n                setIsRegistering(false);\r\n                setBlurStyle(\"\");\r\n                setIsLoggedIn(true);\r\n                setIsGuest(false);\r\n                  let date = new Date();\r\n                date.setTime(date.getTime() + (4 * 60 * 60 * 1000));\r\n                document.cookie = \"UserID\" + \"=\" + data.userID + \"; expires=\" + date.toUTCString() + \"; path=/\";\r\n              }\r\n          })\r\n      .catch(error =>{\r\n          setShowLoginError(true);\r\n      });\r\n  }\r\n  async function tryLogin(username,password){\r\n      const response = await fetch(config.API() + \"/tweetbookapi/Login\",{\r\n        method : \"POST\",\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            username:username,\r\n            password:password\r\n        })\r\n    }).then(response => {\r\n        if (!response.ok){\r\n            throw new Error(response.status);\r\n        }\r\n        return response.json();\r\n    })\r\n        .then(data =>{\r\n              if (data !== -1){\r\n                setBlurStyle(\"\");\r\n                setIsLoggedIn(true);\r\n                setIsGuest(false);\r\n                  setUserLoggedIn({\r\n                      \"UserID\": data.userID,\r\n                      \"Username\": data.username,\r\n                      \"Avatar\": data.avatar\r\n                  });\r\n                setIsRegistering(false);\r\n                setBlurStyle(\"\");\r\n                setIsLoggedIn(true);\r\n                setIsGuest(false);\r\n                  let date = new Date();\r\n                date.setTime(date.getTime() + (4 * 60 * 60 * 1000));\r\n                document.cookie = \"UserID\" + \"=\" + data.userID + \"; expires=\" + date.toUTCString() + \"; path=/\";\r\n              }\r\n          })\r\n      .catch(error =>{\r\n          setShowLoginError(true);\r\n      });\r\n  }\r\n  async function tryRegister(username,password){\r\n    const response = await fetch(config.API() + \"/tweetbookapi/Login/Register\",{\r\n        method : \"POST\",\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            username:username,\r\n            password:password\r\n        })\r\n    }).then(response => response.json())\r\n          .then(data =>{\r\n              let resp = data.value;\r\n              if (resp.userID && resp.userID !== -1){\r\n                setBlurStyle(\"\");\r\n                setIsLoggedIn(true);\r\n                setIsGuest(false);\r\n                  setUserLoggedIn({\r\n                      \"UserID\": resp.userID,\r\n                      \"Username\": username,\r\n                      \"Avatar\": \"guest.png\"\r\n                  });\r\n                setIsRegistering(false);\r\n              }\r\n              else{\r\n                  setRegisterError(resp.message);\r\n              }\r\n          });\r\n\r\n  }\r\n  function loginGuest(){\r\n    setBlurStyle(\"\");\r\n    setIsLoggedIn(false);\r\n    setIsGuest(true);\r\n  }\r\n    function showLogin(){\r\n        setIsRegistering(false);\r\n    }\r\n    function showRegister(){\r\n        setIsRegistering(true);\r\n    }\r\n  const updateReplying = (value, key) =>\r\n  {\r\n    setIsReplying(value)\r\n    setPostReplyId(key)\r\n  }\r\n  function blurAndShowLoading(show){\r\n      if (show){\r\n        setBlurStyle(\"blur-sm\");\r\n      }else{\r\n          setBlurStyle(\"\");\r\n      }\r\n    setFileIsUploading(show);\r\n  }\r\n   function updateLoggedInUserAvatar(fileLocation){\r\n      setUserLoggedIn({\r\n          ...userLoggedIn,\r\n          \"Avatar\": fileLocation\r\n      })\r\n    }\r\n  return (\r\n    <div className=\"flex flex-col content-center items-center\">\r\n      {fileIsUploading &&\r\n        <FileUploadBar/>}\r\n        {isRegistering &&\r\n            <Register setRegisterError={setRegisterError} registerError={registerError} showLogin={showLogin} tryRegister={tryRegister}/>}\r\n      {shouldShowLogin() && cookieChecked &&\r\n        <Login showRegister={showRegister} setShowLoginError={setShowLoginError} showLoginError={showLoginError} loginGuest={loginGuest} tryLogin={tryLogin}/>}\r\n      <div className={blurStyle}>\r\n      {posts.map((post) =>\r\n      {\r\n          return <Post returnButton={returnButton} setPostsString={setPostsString} nestLevel={0} isChild={false} position={\"relative\"} updateLoggedInUserAvatar={updateLoggedInUserAvatar} setFileIsUploading={blurAndShowLoading} getPosts={getPosts} replyingPost={postReplyId} isLoggedIn={isLoggedIn} userLoggedIn={userLoggedIn} loggedInUserIsGuest={isGuest} setIsNewPostVisible={setIsNewPostVisible}\r\n          updateReplying={updateReplying} z={100} top={0} key={post.postID} post={post} offset={0}/>\r\n      })}\r\n      </div>\r\n      {!shouldShowLogin() && !isRegistering && isNewPostVisible && cookieChecked && <ReplyBox updateLoggedInUserAvatar={updateLoggedInUserAvatar} updateAvatar={updateLoggedInUserAvatar} setFileIsUploading={blurAndShowLoading} userID={userLoggedIn.UserID} isGuest={isGuest} parentPostID={null} getPosts={getPosts}\r\n          blurAndShowLoading={blurAndShowLoading} userLoggedIn={userLoggedIn} isLoggedIn={isLoggedIn}\r\n        isNewPostVisible={isNewPostVisible} isReplying={isReplying} fixedBox={true} />}\r\n      <div style={{height:\"275px\"}}>\r\n\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}